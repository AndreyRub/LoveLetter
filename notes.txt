TODO:


AI: When playing the Guard (1), only choose cards that are not completely out of the game. Base this on the discard pile + AI's current hand

Action stage:
    Initialize: look only at active, non-protected players          TODO: Yes, this is suboptimal - a non-protected player can be a threat to a protected player so taking them out is not always a good idea...

    Danger flags - 1st priority:
    Has any player looked at my hand, it's over 1, and they have another turn remaining? --> danger flag.
        action:
            if I know THEIR card, it's not a 1, and I have a 1 myself - play the 1 and take them out
            if known card is 2,4 - play it
            if known card is 3 - play it against player who has played the least 1s
            if known card is 5,6,7 - if holding handmaiden, play it. Otherwise play the card if possible (i.e. not 5,7 / 6,7 hand).
            if known card is 8 - play other card

    Definitions:
    most_1s_played_first = Sorted list (descending) of # of 1s played (i.e. player with MOST 1s played is best target)
    least_1s_played_first = Sorted list (ascending) of # of 1s played (i.e. player with LEAST 1s played is best target)
    this_is_my_last_turn = true if deck_size < number_of_players [+1 if there's at least one active 5 card in play]
    this_is_the_last_move = true if deck_size == 0

    #Tests: define IF this card should be played (used during full logic stage. Not always sufficient)
    #3-test(N=other_card): Anyone has (1,2,...N-1)?
    #5-test(): Anyone has 6,7,8?
    #6-test(): anyone has 7,8?
    #Princess-test: does anyone have a princess?

    Targets - If a card is chosen, this picks the opponent (if required):
        Result should be an ordered list of descending priority.
    1-target:
        Is there a player whose card is known and isn't a 1?
            If so - make this player the current 1-target
        If there is more than one 1-target: sort them by known card value. Append the remaining players
        otherwise: random opponent, guess from remaining non-1 active cards

    2-target:
        most_1s_played_first

    3-target(hand=current_card):
        Do I know what they're holding AND it's lower than my hand?
            If so - make this player the current 3-target
        Otherwise:
            least_1s_played_first

    5-target:
        If anyone holding the princess?             If so - make this player the current 5-target
        If anyone holding 6 or 7?                   If so - make this player the current 5-target
        Otherwise: avoid 1s
            most_1s_played_first

    6-target:
        Is anyone holding 7 or 8?                   If so - make this player the current 6-target
        Otherwise:
            If this_is_my_last_turn: avoid 1s:
                most_1s_played_first
            If not this_is_my_last_turn: prefer 1s:
                least_1s_played_first


    Full list of hands and actions (depending also on knowledge, discard pile, deck size and turn#):
    np = number of active players in game
    1-guess: If known, use it.
             Otherwise: most threatening card, based on the other card left.
                if I'm holding a Princess, go for the 5 or 6
                if I'm holding a 7: go for 8 (or a 6? depending on #turns left)
                If I'm holding a lower card: go for the most-likely card of a higher value

            Card                            Opponent                Notes
    (1,1):  1                               1-target
    (1,2):  if not this_is_my_last_turn: 2  2-target
            otherwise: 1                    1-target
    (1,3):  1
    (1,4):  if this_is_my_last_turn : 1     1-target
            if not this_is_my_last_turn: 4
    (1,5):  1                                                       I think there's no reason to play the 5 here. Maybe against a Princess(8) in the very early stages of the game. But still
    (1,6):  this_is_the_last_move AND 6-test(): 6   6-target                   Can't give them both knowledge and a guard. (I suppose that if another player gets (3,4) and my opponent has a 4, playing the 6 is better. Too difficult to code)
            Otherwise: 1                    1-target                TODO: needs to consider player_will_not_play_again for this
    (1,7):  1                                                       TODO: consider bluffing occasionally
    (1,8):  1 (duh)

    (2,2):  2                               2-target
    (2,3):  3-test(2): 3                    3-target                Kind of rare.
            Otherwise: 2
    (2,4):  if in_danger: 4
            if #deck<=np: 2
            otherwise: random
    (2,5):  5-test(): 5
            otherwise: 2
    (2,6):  6-test(): 6
            otherwise: 2                                            TODO: This should probably depend on remaining turns
    (2,7):  2
    (2,8):  2

    (3,3):  3                               who's played least 1s. Avoid players who have played the 7 last round
    (3,4):  3-test(4): 3
            otherwise: 4
    (3,5):  5-test(): 5
            3-test(5): 3
            otherwise: random                                       TODO: should depend on active deck distribution
    (3,6):  3-test(6): 3
            6-test() : 6
            otherwise: 3
    (3,7):  3                               try to avoid the Princess...
    (3,8):  3

    (4,4):  4
    (4,5):  5-test(): 5
            otherwise: 4
    (4,6):  6-test(): 6
            otherwise: 4
    (4,7):  4
    (4,8):  4

    (5,5):  5                               Princess if known. 6,7 if known.
    (5,6):  Princess-test: 5
            6-test() : 6
            5-test() : 5
    (5,7):  7 (forced)
    (5,8):  5

    (6,7):  7 (forced)
    (6,8):  6                               avoid player with 5. Try player with a 1 (who's played the least 1s)

    (7,8):  7


Done:
Check case where last move is a 5, a player discards his card but cannot draw another one from the deck (it's empty)
Add printout of (computer) player's selection at each stage
Fix randomization <bug?> - seems to not shuffle differently even though requested to
Pass list of allowed moves. This will make designing a "stupid" computer easier.
Implement discard_pile display (add option of input "d" at user prompt
Implement hard-coded input method
    Generate some example games with a fixed sequence, record the sequence + player inputs



Add InputMethod object as property of Player class
    Player object will provide Game object with InputMethod object as a means of getting the next move

in love_letter.py, initialize all input_methods (start with all Human, then make some HardCoded), and send the list to Game



    Class RequestInfo:  Kind-of-container (?) class for a bunch of game state and history data.
                        ** I'm not even sure this is the best method of passing it to InputMethod **


    Class InputMethodInterface:

        properties:



        methods:
            get_player_input(request_info): used for Game object to request player input during player's turn.

                    request_info: action requested, game state and history. TBD. For now:
                        human-readable string (will be printed for Human object)
                        action requested (card + index of card / opponent / guess)
                        player's current hand
                        discard pile
                        list of player moves
                        players' active status (active / lost)
                        players' protection status (protected / not protected)
                        invalid moves (optional) - an assist from Game
                    function returns:
                        played_move: player move, one of:
                            [card_played, card_played_index] - ([int,int], value of card played: <1..8> and index: <1 or 2>)
                            opponent (int, index of opponent card is directed at. value: 1..4. Defaults to 0 - will trigger an error if used)
                            guess (int, index of card guessed during a Guard move. value: 2..8. Defaults to 0 - will trigger an error if used)

    Class InputHuman(InputMethodInterface):
        properties:
            None

        methods:
            init:   <does nothing>
            get_player_input(request_info): Prints the human-readable string and prompts the human for input.
                    function returns:
                        played_move: int value as inputted by human from keyboard

    Class InputComputerHardCoded(InputMethodInterface):
        properties:
            output_sequence: a hard-coded output sequence. Used for hard-coded unit tests with non-random decks. E.g. [1,2,6,2,2,4,1,...]
            state: current position in the output_sequence

                Note: this class can be used for each player separately, or as the same class for all 4 players

        methods:
            init:   sets output_sequence from input at creation. Sets state to 0
            get_player_input(request_info): loads current sequence value, updates the state index and returns the sequence value
                    function returns:
                        played_move: int value as per current sequence value

*** OPTION 1 for defining computer AI ***

    Class InputComputerAI(InputMethod):
        properties:
            state: TBD. Used in logic for deciding next stage. May not be needed.
            logic: a function to override get_player_input
                    Consider: use a PlayerLogic object with run_logic() method to enable type testing

        methods:
            init(logic): loads logic into self.logic
            get_player_input(request_info): runs self.logic(request_info) and returns value
                    Consider:  self.logic.run_logic(request_info)


    Computer bots will all be of class ComputerAI, and playerLogic objects will be designed separately

*** OPTION 2 for defining computer AI ***

    Class InputComputerAI1(InputMethod):
    Class InputComputerAI2(InputMethod):
    Class InputComputerAI3(InputMethod):

    Each InputComputerAI_XX class will have the logic directly programmed into its get_player_input() method





	Class Card:
		properties:
			value: int, range: 1..8
			description: str, same as in game (for display purposes only)
				(implemented in __repr__? I think it's not advisable)

		Methods:
			init: define [value, description] data values

	Class Deck:
		properties:
			cards: 	list of Card objects. 
					order determines next card to draw
			num_of_unused_cards: int. Defines the deck size which causes the game to end (equivalent to setting aside 1 card or more)


		methods:
			init: 	create Values and descriptions as in game (5 "1"s, 2 "2","3","4","5"s, 1 "6","7","8", etc.)
					shuffle the cards list (using shuffle() method)
					set num_of_unused_cards to 1
			deck_size:	returns number of remaining playable cards (i.e. not including the card(s) set aside)
			is_empty:	returns True if number of cards remaining is equal to num_of_unused cards
			shuffle:	shuffles the "cards" list
			deal_card:	pop one card from the deck and return it. 


	Class Player

		properties:
			name:	defaults to "Player 1/2/3/..." but can be input by users
			hand:	list of Card objects. Can be of length 1 (out-of-turn) or 2 (during turn)
			*valid_move:	list of boolean values, length 2. Describes whether each card in hand (hand has 2 cards during the player's turn) can be played
						Note: this still allows useless / sacrificing moves (e.g. playing a 1 when all players have a 4, or playing the 8 and losing the round). It only serves to avoid playing 5/6 when having the 7.

		methods:
			init:			get starting hand from Game object
			show_hand:		show the Game object the player's current card(s)
							When hand size is 1: it will be checked against a player playing 1, shown to another player playing 2, or compared with a player playing 3
							When hand size is 2: it will be shown to Game object to ensure move is valid
			play_card:		discards one card from 2-card hand (given an input index)
			discard_hand: 	return current card and discard it
			add_card:		add a card to current hand





	Class Game

		properties:
			deck:			current deck
			*valid_moves:	a list with valid moves for current player (e.g. [3,4], or [6]).
							Note: this still allows useless / sacrificing moves (e.g. playing a 1 when all players have a 4, or playing the 8 and losing the round). It only serves to avoid playing 5/6 when having the 7.
			protection:		list of True/False per each player. Set to True if player is currently protected by a 4
			discard_pile:	list of all discarded cards
			players:		list of player object in current game
			player_status:	list of Booleans for each player status in the game: True: active, False: inactive (out of the round)
			


		methods:
			init:			init the deck, init all players, give each 1 card. Input: number of players + names (optional)
			play:			runs the main game loop until a winner is declared. Returns winner index
			draw_card:		draw a card from the deck. Returns False if deck is depleted
			give_player_card: draw a card from the deck and add it to a player's hand.
			show_discard_pile:	generate a list of how many cards have been discarded so far
			do_player_turn:	draw a card and give it to a player, show user both cards + discard pile, ask for input, check validity, run card logic
							Note: if deck is empty, draw_card will return false and decide_winner should be called
			run_card:		run card logic. Make sure to check for protection. E.g. card==1, prompt for non-protected targets and guesses card value. 					If all targets are protected, do nothing. Compare guess to card value. If matched, remove player from the game.
								Also: check if princess was forced to be discarded when running 5's logic
			decide_winner:	returns winner from all remaining players (highest card value wins). Returns a list, in case of a draw


Main:
while max(wins) < 4
	game = Game(num_of_players)
	winner_idx = game.play()
	wins[winner_idx] += 1
# Find winner index
print(f"{game.players[winner idx].name} wins!")


Questions:

Should "active" (i.e. not kicked out) be an internal or external property?
i.e. should this be:
	player.is_active
	or
	game.player_status - list of Bool

Should "protection" be a Game property, or a Player property?
i.e. should this be:	
	game.is_protected[0..num_of_players] - list of Bool
	or:
	player.is_protected_ - Bool
	player.set_protection()
	player.get_protection

Should the Player interface directly with the Deck, or should the Game be an intermediary?
i.e. should this be:
	c = deck.draw_card()
	player[2].add_card()
	or:
	player[2].get_card_from_deck(deck)

*Should the player decide which cards are valid to play? Or should the Game look at the current player's cards and check validity? Or both?